tosca_definitions_version: cloudify_dsl_1_3

description: >
  This blueprint creates a Salt Master and Salt Minion on Centos 7 VMs in a Cloudify Management Environment.

imports:
  - https://raw.githubusercontent.com/cloudify-cosmo/cloudify-manager/4.2/resources/rest-service/cloudify/types/types.yaml
  - https://github.com/cloudify-cosmo/cloudify-aws-plugin/releases/download/1.5.1.2/plugin.yaml
  - http://www.getcloudify.org/spec/utilities-plugin/1.4.1/plugin.yaml
  - https://raw.githubusercontent.com/cloudify-incubator/cloudify-utilities-plugin/1.4.1/cloudify_cloudinit/types.yaml
  - imports/cloud-config.yaml
  - imports/groups-policies-aws-openstack.yaml
  - imports/salt.yaml

inputs:

  ami:
    description: >
      An AWS AMI. Tested with a Centos 7.0 image.
    default: { get_secret: centos_core_image }

  instance_type:
    description: >
      The AWS instance_type. Tested with m3.medium, although that is unnecessarily large.
    default: t2.medium

  agent_user:
    description: >
      The username of the agent running on the instance created from the image.
    default: ec2-user

dsl_definitions:

    aws_config: &aws_config
      aws_access_key_id: { get_secret: aws_access_key_id }
      aws_secret_access_key: { get_secret: aws_secret_access_key }
      ec2_region_name: { get_secret: ec2_region_name }
      ec2_region_endpoint: { get_secret: ec2_region_endpoint }

node_templates:

  master_host:
    type: cloudify.aws.nodes.Instance
    properties:
      agent_config:
        install_method: none
        user: { get_input: agent_user }
        port: 22
        key: { get_secret: agent_key_private }
      aws_config: *aws_config
      image_id: { get_input: ami }
      instance_type: { get_input: instance_type }
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: aws.cloudify_aws.ec2.instance.create
          inputs:
            args:
              placement: { get_secret: availability_zone }
              user_data: { get_attribute: [ master_cloud_config, cloud_config ] }
    relationships:
      - type: cloudify.aws.relationships.instance_connected_to_subnet
        target: public_subnet
      - type: cloudify.aws.relationships.instance_connected_to_security_group
        target: security_group
      - type: cloudify.aws.relationships.instance_connected_to_elastic_ip
        target: public_ip
      - type: cloudify.relationships.depends_on
        target: master_cloud_config

  minion_host:
    type: cloudify.aws.nodes.Instance
    properties:
      agent_config:
        install_method: remote
        user: { get_input: agent_user }
        port: 22
        key: { get_secret: agent_key_private }
      aws_config: *aws_config
      image_id: { get_input: ami }
      instance_type: { get_input: instance_type }
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: aws.cloudify_aws.ec2.instance.create
          inputs:
            args:
              placement: { get_secret: availability_zone }
              user_data: { get_attribute: [ minion_cloud_config, cloud_config ] }
    relationships:
      - type: cloudify.aws.relationships.instance_connected_to_eni
        target: minion_nic
      - type: cloudify.relationships.depends_on
        target: minion_cloud_config

  minion_nic:
    type: cloudify.aws.nodes.Interface
    properties:
      aws_config: *aws_config
    relationships:
      - type: cloudify.aws.relationships.connected_to_subnet
        target: private_subnet
      - type: cloudify.aws.relationships.connected_to_security_group
        target: security_group

  security_group:
    type: cloudify.aws.nodes.SecurityGroup
    properties:
      aws_config: *aws_config
      description: Security group for Salt
      rules:
        - ip_protocol: tcp
          from_port: 22
          to_port: 22
          cidr_ip: 0.0.0.0/0
        - ip_protocol: tcp
          from_port: 4505
          to_port: 4506
          cidr_ip: 0.0.0.0/0
    relationships:
      - type: cloudify.aws.relationships.security_group_contained_in_vpc
        target: vpc

  public_ip:
    type: cloudify.aws.nodes.ElasticIP
    properties:
      aws_config: *aws_config
      domain: vpc

  public_subnet:
    type: cloudify.aws.nodes.Subnet
    properties:
      aws_config: *aws_config
      use_external_resource: true
      resource_id: { get_secret: public_subnet_id }
      cidr_block: N/A
      availability_zone: N/A
    relationships:
      - type: cloudify.aws.relationships.subnet_contained_in_vpc
        target: vpc

  private_subnet:
    type: cloudify.aws.nodes.Subnet
    properties:
      aws_config: *aws_config
      use_external_resource: true
      resource_id: { get_secret: private_subnet_id }
      cidr_block:  N/A
      availability_zone:  N/A
    relationships:
      - type: cloudify.aws.relationships.subnet_contained_in_vpc
        target: vpc

  vpc:
    type: cloudify.aws.nodes.VPC
    properties:
      aws_config: *aws_config
      use_external_resource: true
      resource_id: { get_secret: vpc_id }
      cidr_block: N/A
