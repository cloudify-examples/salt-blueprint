tosca_definitions_version: cloudify_dsl_1_3

description: >
  This blueprint creates a Salt Master and Salt Minion on Centos 7 VMs in a Cloudify Management Environment.

imports:
  - http://www.getcloudify.org/spec/cloudify/4.2/types.yaml
  - http://www.getcloudify.org/spec/utilities-plugin/1.4.5/plugin.yaml
  - http://www.getcloudify.org/spec/fabric-plugin/1.5.1/plugin.yaml
  - http://www.getcloudify.org/spec/awssdk-plugin/1.2.0.3/plugin.yaml
  - https://github.com/cloudify-cosmo/cloudify-aws-plugin/releases/download/1.5.1.2/plugin.yaml
  - imports/cloud-config.yaml
  - imports/groups-policies-aws-openstack.yaml
  - imports/salt.yaml

inputs:

  ami:
    description: >
      An AWS AMI. Tested with a Centos 7.0 image.
    default: { get_attribute: [ centos_core_ami, aws_resource_id ] }

  instance_type:
    description: >
      The AWS instance_type. Tested with m3.medium, although that is unnecessarily large.
    default: t2.micro

  agent_user:
    description: >
      The username of the agent running on the instance created from the image.
    default: centos

  agent_key_private:
    description: >
      The content of the agent's private key.
    default: { get_secret: agent_key_private }

  agent_key_public:
    description: >
      The content of the agent's public key.
    default: { get_secret: agent_key_public }

  manager_network:
    default: external

  network_deployment_name:
    default: aws-example-network

  master_ip:
    default: { get_attribute: [ public_ip, aws_resource_id ] }

dsl_definitions:

  aws_config: &aws_config
    aws_access_key_id: { get_secret: aws_access_key_id }
    aws_secret_access_key: { get_secret: aws_secret_access_key }
    ec2_region_name: { get_attribute: [ aws, deployment, outputs, ec2_region_name ] }
    ec2_region_endpoint: { get_attribute: [ aws, deployment, outputs, ec2_region_endpoint ] }

  client_config: &client_config
    aws_access_key_id: { get_secret: aws_access_key_id }
    aws_secret_access_key: { get_secret: aws_secret_access_key }
    region_name: { get_attribute: [ aws, deployment, outputs, ec2_region_name ] }

node_templates:

  master_host:
    type: cloudify.aws.nodes.Instance
    properties:
      agent_config:
        network: { get_input: manager_network }
        install_method: init_script
        user: { get_input: agent_user }
        port: 22
        key: { get_input: agent_key_private }
      aws_config: *aws_config
      image_id: { get_input: ami }
      instance_type: { get_input: instance_type }
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: aws.cloudify_aws.ec2.instance.create
          inputs:
            args:
              placement: { get_input: availability_zone }
              user_data: { get_attribute: [ master_cloud_config, cloud_config ] }
              placement: { get_attribute: [ aws, deployment, outputs, availability_zone ] }
    relationships:
      - type: cloudify.aws.relationships.instance_connected_to_eni
        target: master_nic
      - type: cloudify.relationships.depends_on
        target: public_ip
      - type: cloudify.relationships.depends_on
        target: master_cloud_config
      - type: cloudify.relationships.depends_on
        target: centos_core_ami

  minion_host:
    type: cloudify.aws.nodes.Instance
    properties:
      agent_config:
        network: { get_input: manager_network }
        install_method: init_script
        user: { get_input: agent_user }
        port: 22
        key: { get_input: agent_key_private }
      aws_config: *aws_config
      image_id: { get_input: ami }
      instance_type: { get_input: instance_type }
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: aws.cloudify_aws.ec2.instance.create
          inputs:
            args:
              placement: { get_input: availability_zone }
              user_data: { get_attribute: [ minion_cloud_config, cloud_config ] }
              placement: { get_attribute: [ aws, deployment, outputs, availability_zone ] }
    relationships:
      - type: cloudify.aws.relationships.instance_connected_to_eni
        target: minion_nic
      - type: cloudify.relationships.depends_on
        target: minion_cloud_config
      - type: cloudify.relationships.depends_on
        target: centos_core_ami

  centos_core_ami:
    type: cloudify.nodes.aws.ec2.Image
    properties:
      resource_config:
        kwargs:
          Filters:
          - Name: name
            Values:
            - 'CentOS 7.3.1611 x86_64 with cloud-init (HVM)'
          - Name: owner-id
            Values:
            - '057448758665'
      client_config: *client_config
    relationships:
    - type: cloudify.relationships.contained_in
      target: aws

  public_ip:
    type: cloudify.nodes.aws.ec2.ElasticIP
    properties:
      resource_config:
        kwargs:
          Domain: 'vpc'
      client_config: *client_config
    relationships:
      - type: cloudify.relationships.depends_on
        target: master_nic

  minion_nic:
    type: cloudify.nodes.aws.ec2.Interface
    properties:
      client_config: *client_config
      resource_config:
        kwargs:
          Description: Created by salt-blueprint aws-blueprint.yaml.
          SubnetId: { get_attribute: [ aws, deployment, outputs, private_subnet_id ] }
    relationships:
      - type: cloudify.relationships.depends_on
        target: private_subnet
      - type: cloudify.relationships.depends_on
        target: security_group
    interfaces:
      cloudify.interfaces.lifecycle:
        configure:
          inputs:
            resource_config:
              Description: Created by salt-blueprint aws-blueprint.yaml.
              SubnetId: { get_attribute: [ aws, deployment, outputs, private_subnet_id ] }
              Groups:
              - { get_attribute: [ security_group, aws_resource_id ] }

  master_nic:
    type: cloudify.nodes.aws.ec2.Interface
    properties:
      client_config: *client_config
      resource_config:
        kwargs:
          Description: Created by salt-blueprint aws-blueprint.yaml.
          SubnetId: { get_attribute: [ aws, deployment, outputs, public_subnet_id ] }
    relationships:
      - type: cloudify.relationships.depends_on
        target: public_subnet
      - type: cloudify.relationships.depends_on
        target: security_group
    interfaces:
      cloudify.interfaces.lifecycle:
        configure:
          inputs:
            resource_config:
              Description: Created by salt-blueprint aws-blueprint.yaml.
              SubnetId: { get_attribute: [ aws, deployment, outputs, public_subnet_id ] }
              Groups:
              - { get_attribute: [ security_group, aws_resource_id ] }

  security_group_rules:
    type: cloudify.nodes.aws.ec2.SecurityGroupRuleIngress
    properties:
      client_config: *client_config
      resource_config:
        kwargs:
          IpPermissions:
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            IpRanges:
            - CidrIp: 0.0.0.0/0
          - IpProtocol: tcp
            FromPort: 4505
            ToPort: 4506
            IpRanges:
            - CidrIp: 0.0.0.0/0
    relationships:
    - type: cloudify.relationships.contained_in
      target: security_group

  security_group:
    type: cloudify.nodes.aws.ec2.SecurityGroup
    properties:
      resource_config:
        kwargs:
          GroupName: SaltExampleSecurityGroup
          Description: Created by salt-blueprint aws-blueprint.yaml.
          VpcId: { get_attribute: [ vpc, aws_resource_id] }
      client_config: *client_config
    relationships:
    - type: cloudify.relationships.depends_on
      target: vpc

  public_subnet:
    type: cloudify.nodes.aws.ec2.Subnet
    properties:
      client_config: *client_config
      use_external_resource: true
      resource_config:
        kwargs:
          CidrBlock: 'N/A'
          AvailabilityZone: 'N/A'
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            aws_resource_id: { get_attribute: [ aws, deployment, outputs, public_subnet_id ] }
    relationships:
    - type: cloudify.relationships.depends_on
      target: vpc
    - type: cloudify.relationships.contained_in
      target: aws

  private_subnet:
    type: cloudify.nodes.aws.ec2.Subnet
    properties:
      client_config: *client_config
      use_external_resource: true
      resource_config:
        kwargs:
          CidrBlock: 'N/A'
          AvailabilityZone: 'N/A'
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            aws_resource_id: { get_attribute: [ aws, deployment, outputs, private_subnet_id ] }
    relationships:
    - type: cloudify.relationships.depends_on
      target: vpc
    - type: cloudify.relationships.contained_in
      target: aws

  vpc:
    type: cloudify.nodes.aws.ec2.Vpc
    properties:
      client_config: *client_config
      use_external_resource: true
      # resource_id: { get_attribute: [ aws, deployment, outputs, vpc_id ] }
      resource_config:
        kwargs:
          CidrBlock: 'N/A'
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            aws_resource_id: { get_attribute: [ aws, deployment, outputs, vpc_id ] }
    relationships:
    - type: cloudify.relationships.contained_in
      target: aws

  aws:
    type: cloudify.nodes.DeploymentProxy
    properties:
      resource_config:
        blueprint:
          id: { get_input: network_deployment_name }
          blueprint_archive: https://github.com/cloudify-examples/aws-example-network/archive/master.zip
          main_file_name: simple-blueprint.yaml
          external_resource: external
        deployment:
          id: { get_input: network_deployment_name }
          outputs:
            vpc_id: vpc_id
            public_subnet_id: public_subnet_id
            private_subnet_id: private_subnet_id
            ec2_region_name: ec2_region_name
            ec2_region_endpoint: ec2_region_endpoint
            availability_zone: availability_zone
          external_resource: external
        reexecute: false
